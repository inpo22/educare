<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.care.dao.StuDAO">

	<!-- 학생 리스트 가져오는 쿼리문 -->
	<select id="stdList" resultType="stu">
		SELECT
			user_code,
			name,
			phone,
			gender,
			reg_date
		FROM
			user
		WHERE 
			classify_code='U03'
			<if test="param4 != null and param4 != ''">
				AND(
					<choose>
						<when test="param3 == 'name'">
							name LIKE CONCAT('%', #{param4}, '%')
						</when>
						<when test="param3 == 'gender'">
							gender LIKE CONCAT('%', #{param4}, '%')
						</when>
					</choose>
				)
			</if>
			<if test="param5 != null and param5 != ''">
				AND reg_date &gt;= #{param5}
			</if>
			<if test="param6 != null and param6 != ''">
				AND reg_date &lt;= #{param6}
			</if>
		ORDER BY 
	        reg_date ASC
	    LIMIT #{param1}, #{param2}
	</select>
	
	<!-- 학생 리스트 페이징 쿼리문 -->
	<select id="stdListPageCnt" resultType="Integer">
		SELECT
			CEIL(COUNT(user_code)/#{param1})
		From 
			user
		WHERE 
			classify_code='U03'
			<if test="param3 != null and param3 != ''">
				AND(
					<choose>
						<when test="param2 == 'name'">
							name LIKE CONCAT('%', #{param3}, '%')
						</when>
						<when test="param2 == 'gender'">
							gender LIKE CONCAT('%', #{param3}, '%')
						</when>
					</choose>
				)
			</if>
			<if test="param4 != null and param4 != ''">
				AND reg_date &gt;= #{param4}
			</if>
			<if test="param5 != null and param5 != ''">
				AND reg_date &lt;= #{param5}
			</if>
		ORDER BY 
	        reg_date ASC
	</select>
	
	<!-- 아이디 중복체크 쿼리문 -->
	<select id="overlay" resultType="int">
		SELECT COUNT(id) FROM user WHERE id=#{param}
	</select>
	
	<!-- 학생번호 생성 쿼리문 -->
	<select id="createUserCode" parameterType="map" resultType="String">
		SELECT
			CONCAT(SUBSTR(CAST(#{reg_date} AS CHAR), 1, 4), 
				'U03', RIGHT(CONCAT("000" , 
		        (SELECT (COUNT(u.user_code) + 1) FROM user u WHERE YEAR(u.reg_date) = YEAR(#{reg_date}) 
		    	AND u.user_code LIKE CONCAT('%', 'U03', '%'))), 4))
	</select>
	
	<!-- 학생등록 쿼리문 -->
	<insert id="reg" parameterType="map">
		INSERT INTO user(
			user_code, name, id, pw, email, phone, birth, gender,reg_date, classify_code,photo,status
		)
		VALUES(
			#{user_code},
			#{name},
			#{id},
			#{pw},
			#{email},
			#{phone},
			#{birth},
			#{gender},
			#{reg_date},
			'U03',
			<if test="photo == null">
	            NULL
	        </if>
	        <if test="photo != null">
	            #{photo, jdbcType=VARCHAR}
	        </if>,
	        '0'
		)
			
	</insert>
	
	<!-- 학생 상세정보 쿼리문 -->
	<select id="stuDetail" parameterType="String" resultType="stu">
		SELECT
			user_code,
			name, 
			id,
			email,
			phone,
			birth,
			gender,
			pw,
			status,
			photo,
			reg_date
		FROM 
			user
		WHERE
			user_code=#{param}
	</select>
	
	<!-- 학생 정보 수정 쿼리문 -->
	<update id="edit" parameterType="map">
		UPDATE user SET
			email=#{email}, 
			phone=#{phone},
			birth=#{birth},
			status=#{status},
			gender=#{gender},
			pw = CASE WHEN #{pw} IS NULL THEN pw ELSE #{pw} END
		WHERE user_code=#{user_code}
	</update>
	
	<!-- 결제내역 리스트 -->
	<select id="payList" parameterType="String" resultType="payment">
		SELECT 
		    c.course_name AS course_name,
		    u.name AS name,
		    p.course_price,
		    p.pay_date,
		    p.user_code
		FROM 
		    payment p
		LEFT JOIN 
		    course c ON p.course_no = c.course_no
		LEFT JOIN 
		    `user` u ON c.user_code = u.user_code
		WHERE 
			p.user_code=#{param4} 
		AND
			p.pay_date IS NOT NULL
		<if test="param3 != null and param3 != ''">
	    	AND c.course_name LIKE CONCAT('%', #{param3}, '%')
		</if>
		ORDER BY
			p.pay_date DESC
		LIMIT #{param1}, #{param2}
	</select>
	
	<!-- 결제내역 페이징 쿼리문 -->
	<select id="payListPageCnt" parameterType="String" resultType="Integer">
		SELECT
			CEIL(COUNT(p.course_price)/#{param1})
		FROM 
			payment p
		LEFT JOIN 
		    course c ON p.course_no = c.course_no
		LEFT JOIN 
		    `user` u ON c.user_code = u.user_code
		WHERE 
			p.user_code=#{param3} 
		AND
			p.pay_date IS NOT NULL
		<if test="param2 != null and param2 != ''">
	    	AND c.course_name LIKE CONCAT('%', #{param2}, '%')
		</if>
	</select>
	
	<!-- 수강이력 쿼리문 -->
	<select id="courseList" parameterType="String" resultType="course">
		SELECT 
			c.course_name ,
			u.name,
			DATE_FORMAT(c.course_start, '%Y-%m-%d') AS course_start,
        	DATE_FORMAT(c.course_end, '%Y-%m-%d') AS course_end,
			p.pay_state
		FROM 
			course c 
		LEFT JOIN
			`user` u ON c.user_code = u.user_code
		LEFT JOIN 
			payment p ON c.course_no = p.course_no 
		WHERE 
			p.user_code = #{param4} 
		<if test="param3 != null and param3 != ''">
	    	AND c.course_name LIKE CONCAT('%', #{param3}, '%')
		</if>
		ORDER BY 
			p.pay_code DESC
		LIMIT #{param1}, #{param2}
	</select>
	
	<!-- 수강이력 페이징 쿼리문 -->
	<select id="courseListPageCnt" parameterType="String" resultType="Integer">
		SELECT 	
			CEIL(COUNT(p.pay_state)/#{param1})
		FROM 
			course c 
		LEFT JOIN
			`user` u ON c.user_code = u.user_code
		LEFT JOIN 
			payment p ON c.course_no = p.course_no 
		WHERE 
			p.user_code = #{param3}
		<if test="param2 != null and param2 != ''">
	    	AND c.course_name LIKE CONCAT('%', #{param2}, '%')
		</if>
	</select>
	
	<!-- 강의선택 모달 리스트 -->
	<select id="courseModalList" resultType="course">
		SELECT 
			c.course_name,
			u.name,
			cr.course_space
		FROM 
			course c
		LEFT JOIN 
			`user` u ON c.user_code = u.user_code 
		LEFT JOIN 
			course_rez cr ON c.course_no = cr.course_no
		GROUP BY 
	    	c.course_name, u.name, cr.course_space
	</select>
	
	<!-- 선택한 강의 등록 쿼리문 -->
	<insert id="courseReg" parameterType="map">
	    INSERT INTO payment (user_code, course_no, course_price, pay_state)
	    SELECT
	        #{user_code},
	        c.course_no,
	        c.course_price,
	        0
	    FROM
	        course c
	    WHERE
	        c.course_name = #{course_name}
	        AND NOT EXISTS (
	            SELECT 1
	            FROM payment p
	            WHERE p.user_code = #{user_code}
	            AND p.course_no = c.course_no
	        )
	</insert>
	
	<!-- 강의 중복 여부 -->
	<select id="checkCourse" parameterType="map" resultType="Integer">
		SELECT 
			COUNT(1)
		FROM
			payment p
		JOIN course c ON p.course_no = c.course_no
		WHERE
			p.user_code=#{user_code}
		AND
			c.course_no = (
			SELECT
				course_no
			FROM
				course
			WHERE course_name = #{course_name}
			)
	</select>

	
	<!-- 출석현황 리스트 쿼리문 -->
	<select id="attdList" parameterType="String" resultType="mypage">
		SELECT 
			c.course_name,
			a. att_date,
			a.att_state
		FROM 
			attendance a
		LEFT JOIN
			course c ON a.course_no = c.course_no
		WHERE 	
			a.user_code = #{param4}
		AND 
			DATE(a.att_date) <![CDATA[<=]]> CURDATE()
		<if test="param3 != null and param3 != ''">
	    	AND c.course_name LIKE CONCAT('%', #{param3}, '%')
		</if>
		ORDER BY 	
			a.att_date DESC
		LIMIT #{param1}, #{param2}
	</select>
	
	<!-- 출석현황 리스트 페이징 쿼리문 -->
	<select id="attdListPageCnt" parameterType="String" resultType="Integer">
		SELECT 
			CEIL(COUNT(a.att_state)/#{param1})
		FROM 
			attendance a
		LEFT JOIN
			course c ON a.course_no = c.course_no
		WHERE 	
			a.user_code = #{param3}
		AND 
			DATE(a.att_date) <![CDATA[<=]]> CURDATE()
		<if test="param2 != null and param2 != ''">
	    	AND c.course_name LIKE CONCAT('%', #{param2}, '%')
		</if>
	</select>
	
	<!-- 출석처리 쿼리문 -->
	<update id="attd" parameterType="String">
		UPDATE attendance SET
			att_state= 1
		WHERE
			course_no IN (SELECT course_no FROM course WHERE course_name = #{course_name})
		AND
			user_code=#{user_code}
		AND
			att_date=CONCAT(#{att_date}, ' 12:00:00')
	</update>
	
	<!-- 결석처리 쿼리문 -->
	<update id="absent" parameterType="String">
		UPDATE attendance SET
			att_state=2
		WHERE
			course_no IN (SELECT course_no FROM course WHERE course_name = #{course_name})
		AND
			user_code=#{user_code}
		AND
			att_date=CONCAT(#{att_date}, ' 12:00:00')
	</update>
	
	<!-- 출석률 계산 -->
	<select id="attRate" parameterType="String" resultType="String">
		SELECT 
			ROUND((COUNT(CASE WHEN att_state = 1 THEN 1 ELSE NULL END)/COUNT(CASE WHEN att_state IN (1,2) THEN 1 ELSE NULL END))*100,1) AS 출석률
		FROM 	
			attendance a 
		WHERE 
			user_code =#{user_code}
	</select>
	
</mapper>