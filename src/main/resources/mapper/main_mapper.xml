<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.care.dao.MainDAO">
	
	<select id="chartDataList" resultType="main">
		SELECT
			IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param1}
				AND CASE
					WHEN #{param1} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 1)
					ELSE YEAR(p.pay_date) = YEAR(CURDATE()) END), 0) AS first
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param2}
				AND CASE
					WHEN #{param2} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 1)
					ELSE YEAR(p.pay_date) = YEAR(CURDATE()) END), 0) AS second
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param3}
				AND CASE
					WHEN #{param3} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 1)
					ELSE YEAR(p.pay_date) = YEAR(CURDATE()) END), 0) AS third
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param4}
				AND CASE
					WHEN #{param4} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 1)
					ELSE YEAR(p.pay_date) = YEAR(CURDATE()) END), 0) AS fourth
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param5}
				AND CASE
					WHEN #{param5} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 1)
					ELSE YEAR(p.pay_date) = YEAR(CURDATE()) END), 0) AS fifth
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param6}
				AND YEAR(p.pay_date) = YEAR(CURDATE())), 0) AS sixth
		UNION ALL
		SELECT
			IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param1}
				AND CASE
					WHEN #{param1} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 2)
					ELSE YEAR(p.pay_date) = (YEAR(CURDATE()) - 1) END), 0) AS first
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param2}
				AND CASE
					WHEN #{param2} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 2)
					ELSE YEAR(p.pay_date) = (YEAR(CURDATE()) - 1) END), 0) AS second
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param3}
				AND CASE
					WHEN #{param3} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 2)
					ELSE YEAR(p.pay_date) = (YEAR(CURDATE()) - 1) END), 0) AS third
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param4}
				AND CASE
					WHEN #{param4} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 2)
					ELSE YEAR(p.pay_date) = (YEAR(CURDATE()) - 1) END), 0) AS fourth
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param5}
				AND CASE
					WHEN #{param5} > #{param6} THEN YEAR(p.pay_date) = (YEAR(CURDATE()) - 2)
					ELSE YEAR(p.pay_date) = (YEAR(CURDATE()) - 1) END), 0) AS fifth
			, IFNULL((SELECT ROUND(SUM(p.course_price)/1000000, 1) FROM payment p WHERE p.pay_state = 1 AND MONTH(p.pay_date) = #{param6}
				AND YEAR(p.pay_date) = (YEAR(CURDATE()) - 1)), 0) AS sixth
	</select>
	
	<select id="approvalList" resultType="main">
		WITH approval_order_rank AS (
			SELECT
				*, ROW_NUMBER() OVER (PARTITION BY au_code ORDER BY apv_no) AS row_num
			FROM approval_order
		)
		SELECT
			*
			FROM
			(SELECT
				a.au_code
				, u.name AS user_name
				, (SELECT ac.code_name FROM all_code ac WHERE ac.code = u.class_code) AS class_name
				, a.title
				, a.reg_date
				, aor.state
				, CASE 
					WHEN aor.row_num != 1 THEN (SELECT ao.state FROM approval_order ao WHERE ao.apv_no = (aor.apv_no - 1))
					WHEN aor.row_num = 1 THEN 1
				END AS is_my_turn
			FROM approval a JOIN approval_order_rank aor ON a.au_code = aor.au_code JOIN user u ON a.user_code = u.user_code
			WHERE aor.user_code = #{param1}) AS subquery
		WHERE is_my_turn = 1 AND state = 0
		ORDER BY reg_date DESC LIMIT 5
	</select>
	
	<select id="mailList" resultType="main">
		SELECT 
			m.mail_no
			, u.name AS user_name
			, (SELECT ac.code_name FROM all_code ac WHERE ac.code = u.class_code) AS class_name
			, m.subject
			, m.send_date
		FROM mail m JOIN mail_recipient mr ON m.mail_no = mr.mail_no JOIN user u ON m.send_user_code = u.user_code
		WHERE mr.receive_user_code = #{param1} AND mr.is_del_receiver = 0
		ORDER BY m.mail_no DESC LIMIT 5
	</select>
	
	<select id="scheduleList" resultType="main">
		SELECT
			s.title
			, s.start_date 
			, s.end_date 
			, s.sked_type
			, CASE
				WHEN YEAR(s.start_date) = YEAR(s.end_date) AND MONTH(s.start_date) = MONTH(s.end_date) AND DAY(s.start_date) = DAY(s.end_date)
					THEN 0
				ELSE 1 
			END AS check_period
		FROM schedule s
		<![CDATA[
		WHERE s.is_del = 0 AND TIMESTAMPDIFF(MINUTE, s.start_date, CURRENT_TIMESTAMP()) < 0 
		]]>
		AND (
			(s.team_code = #{param2} AND s.sked_type = 'SKED_TP02') OR
			(s.user_code = #{param1} AND s.sked_type = 'SKED_TP03') OR
			(s.sked_type = 'SKED_TP01')
		)
		ORDER BY s.start_date ASC LIMIT 5
	</select>
	
	<select id="boardList" resultType="main">
		SELECT  
			p.post_no
			, u.name AS user_name
			, (SELECT ac.code_name FROM all_code ac WHERE ac.code = u.class_code) AS class_name
			, p.title
			, p.reg_date
		FROM post p JOIN board b ON p.board_no = b.board_no JOIN user u ON p.user_code = u.user_code
		WHERE p.is_del = 0 AND b.board_no = 1
		ORDER BY p.post_no DESC LIMIT 5
	</select>
	
	<select id="thisMonthHRD" resultType="main">
		SELECT
			(SELECT COUNT(u.user_code) FROM user u WHERE u.classify_code IN('U01', 'U02')
				AND YEAR(u.reg_date) = YEAR(CURDATE()) AND MONTH(u.reg_date) = MONTH(CURDATE())) AS new_emp
			, (SELECT COUNT(u.user_code) FROM user u WHERE u.classify_code IN('U01', 'U02')
				AND YEAR(u.quit_date) = YEAR(CURDATE()) AND MONTH(u.quit_date) = MONTH(CURDATE())) AS quit_emp
			, (SELECT COUNT(o.user_code) FROM officehour o WHERE state = 0 OR state = 1) AS late_emp
			, (SELECT COUNT(o.user_code) FROM officehour o WHERE state = 2) AS absent_emp
			, (SELECT COUNT(u.user_code) FROM user u WHERE u.classify_code = 'U03'
				AND YEAR(u.reg_date) = YEAR(CURDATE()) AND MONTH(u.reg_date) = MONTH(CURDATE())) AS new_stu
	</select>
	
	<select id="todayAtt" resultType="main">
		SELECT 
			o.start_time
			, o.end_time
		FROM officehour o
		WHERE o.user_code = #{param1} AND o.work_date LIKE CONCAT(CURDATE(), '%')
	</select>
	
	<insert id="attendance">
		INSERT INTO officehour (user_code, work_date, start_time)
			VALUES(#{param1}, CURDATE(), CURRENT_TIMESTAMP())
	</insert>
	
	<update id="leaveWork">
		UPDATE officehour
			SET end_time = CURRENT_TIMESTAMP()
				, work_hour = TIMESTAMPDIFF(HOUR, (SELECT o.start_time FROM officehour o 
					WHERE user_code = #{param1} AND work_date LIKE CONCAT(CURDATE(), '%')), CURRENT_TIMESTAMP())
		WHERE user_code = #{param1} AND work_date LIKE CONCAT(CURDATE(), '%')
	</update>
	
	<select id="stateCheck" resultType="Integer">
		SELECT
			<![CDATA[
			CASE
				WHEN o.start_time > CONCAT(CURDATE(), ' 09:00:00') THEN 0
				WHEN o.end_time < CONCAT(CURDATE(), ' 18:00:00') THEN 1
				WHEN o.work_hour < 5 THEN 2
				ELSE -1 END AS state_check
			]]>
		FROM officehour o
		WHERE o.user_code = #{param1} AND o.work_date LIKE CONCAT(CURDATE(), '%')
	</select>
	
	<update id="stateUpdate">
		UPDATE officehour
			SET state = #{param2}
		WHERE user_code = #{param1} AND work_date LIKE CONCAT(CURDATE(), '%')
	</update>
	
	<select id="stdNotiBoardList" resultType="main">
		SELECT  
			p.post_no
			, u.name AS user_name
			, p.title
			, p.reg_date
		FROM post p JOIN board b ON p.board_no = b.board_no JOIN user u ON p.user_code = u.user_code
		WHERE p.is_del = 0 AND b.board_no = 3
		ORDER BY p.post_no DESC LIMIT 5
	</select>
	
	<select id="stdRefBoardList" resultType="main">
		SELECT  
			p.post_no
			, u.name AS user_name
			, p.title
			, p.reg_date
		FROM post p JOIN board b ON p.board_no = b.board_no JOIN user u ON p.user_code = u.user_code
		WHERE p.is_del = 0 AND b.board_no = 4
		ORDER BY p.post_no DESC LIMIT 5
	</select>
	
	<select id="stdScheduleList" resultType="main">
		SELECT
			c.course_name 
			, cr.start_time
			, cr.course_space 
		FROM course_rez cr JOIN course c ON cr.course_no = c.course_no JOIN payment p ON cr.course_no = p.course_no
		<![CDATA[
		WHERE p.user_code = #{param1} AND TIMESTAMPDIFF(MINUTE, cr.start_time, CURRENT_TIMESTAMP()) < 0 AND p.pay_state = 1
		]]>
		ORDER cr.start_time ASC, cr.rez_no ASC LIMIT 5;
	</select>
	
	
</mapper>